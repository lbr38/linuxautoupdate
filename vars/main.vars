#!/bin/bash
# Location /etc/linuxautoupdate/vars/main

## /!\ Ne pas modifier ##
# Variables utilisées par linuxautoupdate

DATE_J=$(date +%d)									# Date du jour au format 'JJ'
DATE_JM=$(date +%d-%m)								# Date du jour au format 'JJ-MM'
DATE_JMA=$(date +%d-%m-%Y)							# Date du jour au format 'JJ-MM-AAAA'
DATE_AMJ=$(date +%Y-%m-%d)							# Date du jour au format 'JJ-MM-AAAA'
DATE_FULL=$(date +%d-%m-%Y_%Hh%M)					# Date du jour au format 'JJ-MM-AAAA_hh-mm'
DATE_NOM=$(date +%A)								# Date du jour au format 'lundi'
HEURE=$(date +%Hh%M)								# Heure au format 00h00
LINUXAUTOUPDATE="${BASE_DIR}/linuxautoupdate"
ETC_DIR="/etc/linuxautoupdate"
CONF="${ETC_DIR}/linuxautoupdate.conf"
FUNCTIONS="${BASE_DIR}/functions"
MODULES_DIR="${BASE_DIR}/modules"
LOGS_DIR="${BASE_DIR}/logs"

OS_FAMILY=""
OS_NAME=""
OS_VERSION=""
PKG_MANAGER=""
SERVER_TYPE=""
SERVER_ENV=""
REPOSERVER=""
MAIL_ALERT="0"
MAIL_DEST=""
CONF_SOFT_EXCLUDE_MAJOR=""
CONF_SOFT_EXCLUDE=""
CONF_SOFT_NEED_RESTART=""
CONF_SOFT_KEEP_CRON=""
CONF_ALLOW_AUTOUPDATE=""
CONF_ALLOW_OVERWRITE=""
CONF_ALLOW_REPOSFILES_OVERWRITE=""
HISTORIQUE="${BASE_DIR}/linuxautoupdate.historique"		                    # Emplacement du fichier d'historique des mises à jour
MD5SUM="$(/usr/bin/md5sum ${BASE_DIR}/linuxautoupdate | awk '{print $1}')"  # md5sum de ce script
RAPPORT="linuxautoupdate-${DATE_FULL}_${HOSTNAME}.log"                     	# Nom du fichier de log/rapport
LOG="${LOGS_DIR}/${RAPPORT}"                                                # Emplacement du fichier de log
LOG_RAPPORT_MAIL="/tmp/${RAPPORT}"							                # Le même fichier mais qui sera légèrement reformaté pour être envoyé par mail puis supprimé
DIST_UPGRADE="0"
KEEP_OLDCONF="0"
ERREUR_MAJ="0"
IGNORE_EXCLUDE="0"
MAJ_EXCLUDE=""
MAJ_NEED_RESTART=""
MOD_REPOSERVER=""
CRONTAB_PATH=""

# Variables de modules
MOD_REPOSERVER_ENABLED=""
MOD_SERVICERESTART_ENABLED=""


# Affichage dans le terminal
# Variables de couleurs :
BLANC=$(tput setaf 7)
GRIS=$(tput setaf 8)
VERT=$(tput setaf 2)
ROUGE=$(tput setaf 1)
JAUNE=$(tput setaf 3)
CYAN=$(tput setaf 6)
RESET=$(tput sgr0)
# en version bold :
BLANCB=$(tput bold;tput setaf 7)
GRISB=$(tput bold;tput setaf 8)
VERTB=$(tput bold;tput setaf 2)
ROUGEB=$(tput bold;tput setaf 1)
JAUNEB=$(tput bold;tput setaf 3)
CYANB=$(tput bold;tput setaf 6)

tabs 20                                                           # Taille des tabulations
SEP=$(printf '%*s\n' "${COLUMNS:-$(tput cols)}" '' | tr ' ' '=')	# Séparateur ligne plein écran

# Détection du système
# Le fichier /etc/os-release est présent sur les OS récents et permet de récupérer toutes les infos nécéssaires
if [ -f "/etc/os-release" ];then
	OS_FAMILY=$(grep "^ID_LIKE=" /etc/os-release | cut -d'=' -f2 | sed 's/"//g')
	
	if [ -z "$OS_FAMILY" ];then
		echo -e "[${ROUGE} ERREUR ${RESET}] Famille d'OS non reconnue"
		exit
	fi

	# Si OS_FAMILY contient l'un des termes suivants alors c'est la famille redhat
	if echo "$OS_FAMILY" | egrep -q -i 'rhel|centos|fedora';then
		OS_FAMILY="Redhat"
	fi

	# Si OS_FAMILY contient l'un des termes suivants alors c'est la famille debian
	if echo "$OS_FAMILY" | egrep -q -i 'debian|ubuntu|kubuntu|xubuntu|armbian|mint';then
		OS_FAMILY="Debian"
	fi

	# Enfin si OS_FAMILY n'est ni égale à Redhat ni à Debian alors on est sur un OS non pris en charge
	if ! echo "$OS_FAMILY" | egrep -q -i 'Redhat|Debian';then
		echo -e "[${ROUGE} ERREUR ${RESET}] Famille d'OS non prise en charge ($OS_FAMILY)"
		exit
	fi

	# Toujours à partir de /etc/os-release, on récupère le nom de l'OS et sa version
	OS_NAME=$(grep "^ID=" /etc/os-release | cut -d'=' -f2 | sed 's/"//g')
	if [ -z "$OS_NAME" ];then
		echo -e "[${ROUGE} ERREUR ${RESET}] Nom d'OS inconnu"
		exit
	fi

	OS_VERSION=$(grep "^VERSION_ID=" /etc/os-release | cut -d'=' -f2 | sed 's/"//g')
	if [ -z "$OS_VERSION" ];then
		echo -e "[${ROUGE} ERREUR ${RESET}] Version d'OS inconnue"
		exit
	fi
fi

# Cas où /etc/os-release n'existe pas
if [ ! -f "/etc/os-release" ];then
	# Si apt est présent, on est sur un os de la famille Debian
	if [ -f "/usr/bin/apt" ];then
		OS_FAMILY="Debian"
	fi
	# Si yum ou dnf est présent, on est sur un os de la famille Redhat
	if [ -f "/usr/bin/yum" ] || [ -f "/usr/bin/dnf" ];then
		OS_FAMILY="Redhat"
	fi

	# A ce stade si OS_FAMILY est vide alors on est sur un OS non pris en charge
	if [ -z "$OS_FAMILY" ];then
		echo -e "[${ROUGE} ERREUR ${RESET}] Famille d'OS inconnue, système non pris en charge"
		exit
	fi

	# /usr/bin/lsb_release est un programme uniquement présent sur les OS de la famille Debian
	if [ -f "/usr/bin/lsb_release" ];then
		OS_NAME=$(lsb_release -a 2> /dev/null | grep 'Distributor ID:' | awk '{print $NF}')
		OS_VERSION=$(lsb_release -a 2> /dev/null | grep 'Release:' | awk '{print $NF}')
	fi

	# Dernier recours pour les OS de la famille Redhat
	# Si /etc/centos-release existe, c'est un centos
	if [ -f "/etc/centos-release" ];then
		OS_NAME="CentOS"
		OS_VERSION=$(rpm --eval '%{centos_ver}')
	fi
	# Si /etc/fedora-release existe, c'est un fedora
	if [ -f "/etc/fedora-release" ];then
		OS_NAME="Fedora"
		OS_VERSION=$(cat /etc/os-release | grep "VERSION_ID" | cut -d'=' -f2 | sed 's/"//g')
	fi

	# On quitte le script si on n'a rien trouvé à ce stade
	if [ -z "$OS_NAME" ];then
		echo -e "[${ROUGE} ERREUR ${RESET}] Nom d'OS inconnu"
		exit
	fi 
	if [ -z "$OS_VERSION" ];then
		echo -e "[${ROUGE} ERREUR ${RESET}] Version d'OS inconnue"
		exit
	fi
fi

if [ "$OS_FAMILY" == "Debian" ];then
	PKG_MANAGER="apt"
fi
if [ "$OS_FAMILY" == "Redhat" ];then
	if [ -f "/usr/bin/yum" ];then
		PKG_MANAGER="yum"
	fi
	if [ -f "/usr/bin/dnf" ];then
		PKG_MANAGER="dnf"
	fi
	# Si les deux sont présents (fedora alors on utilisera yum de préférence)
	if [ -f "/usr/bin/yum" ] && [ -f "/usr/bin/dnf" ];then
		PKG_MANAGER="yum"
	fi
fi