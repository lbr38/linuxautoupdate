#!/bin/bash
# à revoir (adapter liens github)
# remplacer les url par des urls de gitlab

# Vérifie si une nouvelle version de ce script est disponible et averti l'utilisateur qu'il faut la déployer
if [ "$ALLOW_SELF_UPDATE" == "yes" ];then # Si l'autoupdate est autorisé alors on vérifie si une nouvelle version est dispo et on applique la maj si c'est le cas
	echo -ne "Vérification des mises à jour : "
	VERSION_DISPO=$(curl -s "https://raw.githubusercontent.com/lbr38/linuxautoupdate/master/version")
	if [ -z "$VERSION_DISPO" ];then
		echo -e "[$ROUGE ERREUR $RESET] lors de la récupération du numéro de version disponible\n"
	elif [ "$VERSION" != "$VERSION_DISPO" ];then
		echo -e "${JAUNE}Une nouvelle version est disponible${RESET}"
		rm /tmp/linuxautoupdate -rf
		cd /tmp &&

		# Téléchargement de la nouvelle version :
		echo -ne "\n → Téléchargement de la nouvelle version :\t" &&
		if git clone --quiet https://github.com/lbr38/linuxautoupdate.git > /dev/null;then
			echo -e "[$VERT OK $RESET]"
		else
			echo -e "[$ROUGE ERREUR $RESET] lors du téléchargement"
			(( UPDATE_ERROR++ ))
			clean_exit
		fi

		cd /tmp/linuxautoupdate &&
		rsync -aP --quiet --delete-after functions/ ${BASE_DIR}/functions/
		rsync -aP --quiet --delete-after mods-available/ ${BASE_DIR}/mods-available/
		rsync -aP --quiet linuxautoupdate ${BASE_DIR}/
		rsync -aP --quiet version ${BASE_DIR}/

		exec ${BASE_DIR}/linuxautoupdate

	else # Si il n'y a pas de nouvelle version disponible, il n'y a rien à faire. On affiche OK car la vérification a été faite sans erreur
		echo -e "Pas de nouvelle version disponible\n"
	fi
fi